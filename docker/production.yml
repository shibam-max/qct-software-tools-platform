version: '3.8'

services:
  device-service:
    build: 
      context: ../java-backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DATABASE_URL=jdbc:postgresql://postgres:5432/qct_devices
      - DATABASE_USERNAME=${DB_USERNAME}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - qct-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/devices/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ../dotnet-backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=QCT_Users;User Id=sa;Password=${SQL_PASSWORD};TrustServerCertificate=true;
    depends_on:
      - sqlserver
    networks:
      - qct-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=qct_devices
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - qct-network
    restart: unless-stopped

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_PASSWORD}
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ../database/init-sqlserver.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - qct-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - qct-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - device-service
      - user-service
    networks:
      - qct-network
    restart: unless-stopped

volumes:
  postgres_data:
  sqlserver_data:
  redis_data:

networks:
  qct-network:
    driver: bridge